Assets Commands

An asset is a user-defined data structure or NFT that is stored in a register, owned by a given profile. Assets can hold one or more pieces of data and users can define the fields (name, data, type, mutability) that data is stored in.

Supported Nouns

The following nouns are supported for this API command-set:
Noun 	Description
asset 	An editable register with type safety
raw 	An editable register without type safety
readonly 	A non-editable register without type safety
any 	Any asset, raw, or readonly register
schema 	An asset template for user-defined standards

Example:

You can include more than one noun for a command if you separate them by a comma ,

assets/list/asset,raw,readonly

Will return all the assets of type asset, raw, and readonly that the session profile owns.

Supported Verbs

The following verbs are currently supported by this command-set:
Verb 	Description 	Nouns
create 	Generate a register of specified type 	asset, raw, readonly, schema
get 	Get register of supported type 	any, asset, raw, readonly, schema
list 	List all registers owned by active session 	any, asset, raw, readonly, partial, schema
transfer 	Transfer a specified register 	any, asset, raw, readonly
claim 	Claim ownership of a register 	any, asset, raw, readonly
tokenize 	To represent ownership of an asset object with a token object 	asset
transactions 	List all transactions that modified specified object 	any, asset, raw, readonly, schema
history 	Generate the history of all last states 	any, asset, raw, readonly, schema
update 	Update a specified object 	any, asset, raw, readonly, schema
verify 	Verify if a given register has been tokenized 	partial

Example:

The following will show you how to invoke a basic <verb>/<noun> URI:

assets/list/any

Will return all the assets of type any that the session profile owns.

Supported Operators

The following verbs are currently supported by this command-set:
Operator 	Description
array 	Returns an array of values from the filtered data-set
count 	Returns the total number of occurrences of a value in the filtered data-set
floor 	Strips the decimal off of a value or array of values
max 	Returns the largest value in the filtered data-set
mean 	Returns the average value of the filtered data-set
min 	Returns the smallest value in the filtered data-set
mode 	Returns the most occurring value in the filtered data-set
sum 	Returns the sum of all the values in the filtered data-set

Example:

The following will show you how to invoke a basic <verb>/<noun>/<field>/<operator> URI:

assets/list/any/modified/mean

The above will calculate the average value of the modified field for all assets owned by active session.

Supported Formats

When creating or modifying a register, a format is required to encode the operations to the given register. The following formats are supported for this command-set.
Format 	Description
readonly 	Takes string argument data=<data>, creates raw state
raw 	Takes string argument data=<data>, creates or updates raw state
basic 	Takes all additional string arguments as key=value, updates or creates fields of object with string type
json 	Takes string argument json=<json>, updates or creates fields of object for any type and mutability

Please see the FORMATS page to learn how to use the above formats in more details.

create

Create a new object register specified by given noun.

assets/create/noun

The supported nouns for this command are asset, raw, readonly, or schema

Required:

The following list are required parameters to execute the given command. If you do not supply any of the following parameters, the command will fail with an error response designating the missing parameters.

Session:

This command requires a valid session to be active with these parameters required to identify and authenticate the given session.

    pin : Required if not unlocked for transactions. This is the PIN that was used when creating master profile.

    session : Required if argument -multiuser=1 is set, used to identify the session to invoke the command under. For single-user API mode the session should not be supplied.

Formats:

The following parameter is required to identify the format input for modeling the corresponding asset:

    format : Required to identify the format used to define the asset. Values can be readonly, raw, basic and JSON.

Optional:

These parameters are not required to execute this command, but give you the ability to change specific details of the command:

    name : A UTF-8 encoded string that will generate a name object register that points to new object. This will cost an additional 1 NXS if on the mainnet.

NOTE:

    There is a limit of 1KB for asset data to be saved in the register, excluding the asset name.
    There is a fee of 1 NXS for creating and an asset and an additional 1 NXS for the optional name object.

Results:

The following object will be returned under the JSON object results if the command succeeded.

{
    "success": true,
    "address": "87VmNhitFJv3WA3Yrovt9A3hts2MoXcfExyy9LiXyhK1sdThwYM",
    "txid": "01230bbc8f0d72aaaff13471e34520d17902290de9a1e5ce1f320f0883024e2d96e21b59a3e48b8d2b5ba2874e93d5d3b4f412e06dc92440c2e12682c958fe34"
}

Return Values:

    success : Boolean flag indicating that the asset was created successfully.
    address : The register address for the register that was just created.
    txid : The hash of the transaction that was generated for this tx.

get

Retrieves information for an asset and returns a JSON structured object with the fields. You must choose the correct noun in order to have command execute.

assets/get/noun

The supported nouns for this command are any, asset, raw, readonly, or schema. If you are unsure of the correct noun then you can use the any keyword, or aggregate nouns using the comma as separator.

Required:

The following list are required parameters to execute the given command. If you do not supply any of the following parameters, the command will fail with an error response designating the missing parameters.

Session:

This command requires a valid session to be active with these parameters required to identify and authenticate the given session.

    pin : Required if not unlocked for transactions. This is the PIN that was used when creating master profile.

    session : Required if argument -multiuser=1 is set, used to identify the session to invoke the command under. For single-user API mode the session should not be supplied.

Lookup:

One of the below identifier parameters can be used, if name is provided you do not need to include address and vice-versa. The following parameters are mutually exclusive.

    address : Required to lookup the register by address if the name field is not provided.

    name : Required to lookup the register address if the address field is not provided. The name should be in the format username:name (for local names) or namespace::name (for names in a namespace). If you are logged in, the username: field is not required.

Results:

The following object will be returned under the JSON object results if the command succeeded.

[
    {
        "owner": "b7392196b83aca438567558462cd0c5d982569c7cefa668500c4bf3e61a03b7a",
        "version": 1,
        "created": 1655279431,
        "modified": 1655279431,
        "type": "OBJECT",
        "Location": "Meta World ",
        "Owner Name": "John Doe",
        "Registration Details": "MRG/05/478564",
        "address": "87Wai2JoS4hNAEVXZVmejLS6pK21XQWKoLAkaep5aXFdrYnJJyk",
        "name": ":Meta_World"
    }
]

Return Values:

    owner : The username hash of the owners profile.
    version : The serialization version of the transaction.
    created : The UNIX timestamp when the asset was created.
    modified : The UNIX timestamp when the asset was last modified.
    type : Asset register type. Can be OBJECT, RAW or READONLY.
    data : If the register is raw or readonly the raw data will be returned under this key.
    <fieldname>=<value> : If the register is asset or schema it will return the fields as key/value pairs.
    address : The register address that is currently assigned to given asset.
    name : The name that is currently pointed to the given register, if any are assigned.

list

Retrieves a list of all the asset objects owned by the profile specified by the noun.

assets/list/noun

This command supports the asset, readonly, raw, and any nouns.

list/assets

Lists all the assets for object register type.

list/readonly

Lists all assets for readonly register type.

list/raw

Lists all assets for raw register type.

list/any

Lists all assets for all supported register types.

list/partial - List users partial ownership details for tokenized assets.

Parameters:

session : Required by argument -multiuser=1 to be supplied to identify the user session. For single-user API mode the session should not be supplied.

where : An array of clauses to filter the JSON results. More information on filtering the results from /list/xxx API methods can be found at Queries.

Sorting.

Filtering.

Operators.

Results:
Return value JSON object:

[
    {
        "owner": "b7392196b83aca438567558462cd0c5d982569c7cefa668500c4bf3e61a03b7a",
        "version": 1,
        "created": 1655279431,
        "modified": 1655279431,
        "type": "OBJECT",
        "Location": "Margoa",
        "Owner Name": "Ageon",
        "Registration Details": "MRG/05/478564",
        "address": "87Wai2JoS4hNAEVXZVmejLS6pK21XQWKoLAkaep5aXFdrYnJJyk",
        "name": "local:Asset2"
    }
]
[Completed in 2.838543 ms]

Return Values:

owner : The username hash of the owners profile.

version : The serialization version of the transaction.

created : The UNIX timestamp when the asset was created.

modified : The UNIX timestamp when the asset was last modified.

type : Asset register type. Can be OBJECT, RAW or READONLY.

data : The data stored in a raw or readonly asset object.

<fieldname>=<value> : The key-value pair for each piece of data stored in the asset.

address : The register address of the asset.
name : The name identifying the asset.

update

This method provides the user with the ability to update the object data specified by the noun.

assets/update/noun

This command only supports the asset and raw nouns.

update/asset

This updates the data values for asset with the format basic and JSON.

update/raw

This updates the data values for the raw item register.

Parameters:

pin : Required if locked. The PIN for this profile.

session : Required by argument -multiuser=1 to be supplied to identify the user session. For single-user API mode the session should not be supplied.

name : Required to identify the name of the asset. The name should be in the format username:name (for local names) or namespace::name (for names in a namespace). This is optional if the address is provided.

address : Required to identify the register address of the asset. This is optional if the name is provided.

format : Required to specify the format of the asset to update. Values can be readonly, raw, basic and JSON.

data : Required if format is readonly or raw, allows caller to update the data object.

<fieldname>=<value> : Optional for format basic, The caller can provide 'key=value' pairs to update each piece of data for the asset.

Results:
Return value JSON object:

{
    "success": true,
    "txid": "01947f824e9b117d618ed49a7dd84f0e7c4bb0896e40d0a95e04e27917e6ecb6b9a5ccfba7d0d5c308b684b95e98ada4f39bbac84db75e7300a09befd1ac0999"
}
[Completed in 18533.182336 ms]

Return values:

success : Boolean flag indicating that the asset was saved successfully.

txid : The hash of the transaction that was generated for this tx. If using -autotx this field will be ommitted.